 import pandas as pd
 from sklearn.model_selection import train_test_split
 from sklearn.linear_model import linearregression
 from sklearn.metrics import mean_squared_error
 import numpy as np
 class cricketmatchpredictor:
 def __init__(self):
 # load historical match dataself.match_data = pd.read_csv(‘match_data.csv’)
 def preprocess_data(self):
 # data preprocessing steps
 # example: convert categorical variables to numerical, handle missing values, etc.
 def train_model(self):
 # select relevant features and split data into training and testing sets
 x = self.match_data[[‘team1ranking’, ‘team2ranking’, ‘venue’,‘weather’]]
 y = self.match_data[‘winner’]
 x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
 # train linear regression model
 model = linearregression()
 model.fit(x_train, y_train)
 # evaluate model
 y_pred = model.predict(x_test)
 mse = mean_squared_error(y_test, y_pred)
 print(“mean squared error:”, mse)
 return model
 def predict_probability(self, model, team1_ranking,team2_ranking, venue, weather):
 # predict the probability of winning for each team
 input_data = np.array([[team1_ranking, team2_ranking, venue, weather]])
 probability_team1 = model.predict(input_data)
 probability_team2 = 1 – probability_team1
 return probability_team1[0], probability_team2[0]
 if __name__ == “__main__”:
 # create an instance of cricketmatchpredictor
 predictor = cricketmatchpredictor()
 # preprocess data
 predictor.preprocess_data()
 # train the model
 print(“training the model…”)
 model = predictor.train_model()
 # example prediction
 team1_ranking = 3
 team2_ranking = 5
 venue = ‘london’
 weather = ‘sunny’
 print(f”predicting the probability of winning for {team1_ranking} vs {team2_ranking} at {venue} in {weather} weather…”)
 probability_team1, probability_team2 = predictor.predict_probability(model, team1_ranking, team2_ranking,venue, weather)
 print(f”probability of team 1 winning: {probability_team1}”)
 print(f”probability of team 2 winning: {probability_team2}”)
